<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:cache="http://www.springframework.org/schema/cache"
	xsi:schemaLocation="
            http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
            http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
            http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd
            http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
            http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd">

	<context:component-scan base-package="com.mpos" />
	<!-- turn on declarative caching -->
	<cache:annotation-driven />

	<!-- ApplicationContext will register BeanPostProcessor automatically. -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:jdbc.properties</value>
				<value>classpath:redis.properties</value>
			</list>
		</property>
	</bean>

	<!-- ==================================================== -->
	<!-- ENTITY MANAGER DEFINITION .......................... -->
	<!-- ==================================================== -->
	<bean id="dataSource" class="com.jolbox.bonecp.BoneCPDataSource"
		destroy-method="close">
		<property name="driverClass" value="${jdbc.driver}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="username" value="${jdbc.user}" />
		<property name="password" value="${jdbc.password}" />
		<property name="minConnectionsPerPartition" value="${min_conn_per_partition}" />
		<property name="maxConnectionsPerPartition" value="${max_conn_per_partition}" />
		<property name="partitionCount" value="${partition_count}" />
		<property name="acquireIncrement" value="${conn_acquire_increment}" />
		<property name="statementsCacheSize" value="${statement_cache_size}" />
		<!-- property name="releaseHelperThreads" value="${number_of_helper_threads}" 
			/ -->
		<property name="idleConnectionTestPeriodInMinutes" value="${idle_connection_test_period}" />
		<property name="connectionTestStatement" value="select sysdate from DUAL" />
		<property name="logStatementsEnabled" value="false" />
		<!-- property name="initSQL" value="${init_sql}" / -->
	</bean>

	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>

	<!-- Refer to http://spring.io/blog/2012/04/06/migrating-to-spring-3-1-and-hibernate-4-1 -->
	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="persistenceUnitName" value="lottery_te" />
		<property name="dataSource" ref="dataSource" />
		<!-- by packagesToScan, no need of persisten.xml any more -->
		<property name="packagesToScan">
			<list>
				<value>com/mpos</value>
			</list>
		</property>
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
				<property name="databasePlatform" value="org.hibernate.dialect.Oracle10gDialect" />
			</bean>
		</property>
		<property name="jpaProperties">
			<props>
				<prop key="hibernate.jdbc.batch_size">20</prop>
			</props>
		</property>
	</bean>

	<!-- ==================================================== -->
	<!-- REDIS CACHE MANAGER DEFINITION ..................... -->
	<!-- ==================================================== -->
	<!-- Jedis ConnectionFactory -->
	<bean id="jedisConnectionFactory"
		class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		<property name="hostName" value="${redis.host-name}" />
		<property name="port" value="${redis.port}" />
		<property name="usePool" value="true" />
	</bean>

	<bean id="stringRedisSerializer"
		class="org.springframework.data.redis.serializer.StringRedisSerializer" />

	<!-- redis template definition, refer to http://java.dzone.com/articles/spring-data-redis -->
	<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
		<property name="connectionFactory" ref="jedisConnectionFactory" />
		<!-- One important thing to mention is that you should use stringSerializers 
			for keys, otherwise you will have problems from other clients, because standard 
			serialization adds class information. -->
		<property name="keySerializer" ref="stringRedisSerializer" />
		<property name="hashKeySerializer" ref="stringRedisSerializer" />
	</bean>

	<!-- declare Redis Cache Manager -->
	<bean id="cacheManager" class="org.springframework.data.redis.cache.RedisCacheManager">
		<constructor-arg ref="redisTemplate" />
	</bean>
</beans>

